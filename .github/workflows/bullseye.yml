name: bullseye

on:
  push:
    branches:
      - c201-v2
      - testing
      - c201-testing

jobs:
  x86_64:
    runs-on: ubuntu-20.04
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    - name: Install dependencies
      run: sudo apt-get install -y --no-install-recommends vboot-kernel-utils cgpt extlinux qemu-system-x86 graphicsmagick-imagemagick-compat caca-utils
    - name: Create cache directories
      run: |
        mkdir -p local-repositories petbuild-sources petbuild-cache petbuild-output kernel-kit-output
        ln -s `pwd`/local-repositories ../local-repositories
    - name: Get cached local-repositories
      uses: actions/cache@v2
      with:
        path: local-repositories
        key: ${{ github.workflow }}-${{ github.job }}-local-repositories-${{ github.sha }}
        restore-keys: |
          ${{ github.workflow }}-${{ github.job }}-local-repositories-
    - name: Prepare build environment
      run: |
        [ -f local-repositories/vercmp ] || (curl https://raw.githubusercontent.com/puppylinux-woof-CE/initrd_progs/master/pkg/w_apps_static/w_apps/vercmp.c | gcc -x c -o ../local-repositories/vercmp -)
        sudo install -m 755 local-repositories/vercmp /usr/local/bin/vercmp
        sudo install -D -m 644 woof-code/rootfs-skeleton/usr/local/petget/categories.dat /usr/local/petget/categories.dat
        echo "dash dash/sh boolean false" | sudo debconf-set-selections
        sudo DEBIAN_FRONTEND=noninteractive dpkg-reconfigure dash
        sudo ln -s /usr/bin/mount /usr/local/bin/mount-FULL
    - name: Fix cache ownership
      run: sudo chown -R root:root local-repositories
    - name: merge2out
      run: |
        (echo 3; echo 1; echo 1; echo) | sudo -E ./merge2out
    - name: 0setup
      run: |
        cd ../woof-out_x86_64_x86_64_debian_bullseye
        sudo ./0setup
    - name: 1download
      run: |
        cd ../woof-out_x86_64_x86_64_debian_bullseye
        sudo ./1download
    - name: Get cached kernel-kit output
      id: get_kernel_kit_output_cache
      uses: actions/cache@v2
      with:
        path: kernel-kit-output
        key: ${{ github.workflow }}-${{ github.job }}-kernel-kit-output-${{ hashFiles('kernel-kit/**') }}
        restore-keys: |
          ${{ github.workflow }}-${{ github.job }}-kernel-kit-output-
    - name: Move cached kernel-kit output
      run: sudo mv kernel-kit-output ../woof-out_x86_64_x86_64_debian_bullseye/kernel-kit/output
    - name: Install ccache
      if: steps.get_kernel_kit_output_cache.outputs.cache-hit != 'true'
      run: |
        sudo apt-get install -y --no-install-recommends ccache
        ccache --set-config=hash_dir=false --set-config=max_size=2.0G
    - name: Get cached ~/.ccache
      if: steps.get_kernel_kit_output_cache.outputs.cache-hit != 'true'
      uses: actions/cache@v2
      with:
        path: ~/.ccache
        key: ${{ github.workflow }}-${{ github.job }}-ccache-${{ github.sha }}
        restore-keys: |
          ${{ github.workflow }}-${{ github.job }}-ccache-
    - name: kernel-kit
      if: steps.get_kernel_kit_output_cache.outputs.cache-hit != 'true'
      run: |
        cd ../woof-out_x86_64_x86_64_debian_bullseye/kernel-kit
        sudo cp -f bullseye-build.conf build.conf
        sudo -E ./build.sh
    - name: 2createpackages
      run: |
        cd ../woof-out_x86_64_x86_64_debian_bullseye
        echo | sudo ./2createpackages
    - name: Get cached petbuild-sources
      id: get_petbuild_sources_cache
      uses: actions/cache@v2
      with:
        path: petbuild-sources
        key: ${{ github.workflow }}-petbuild-sources-${{ github.sha }}
        restore-keys: |
          ${{ github.workflow }}-petbuild-sources-
    - name: Get cached petbuild-cache
      id: get_petbuild_cache
      uses: actions/cache@v2
      with:
        path: petbuild-cache
        key: ${{ github.workflow }}-${{ github.job }}-petbuild-cache-${{ github.sha }}
        restore-keys: |
          ${{ github.workflow }}-${{ github.job }}-petbuild-cache-
    - name: Get cached petbuild-output
      id: get_petbuild_output_cache
      uses: actions/cache@v2
      with:
        path: petbuild-output
        key: ${{ github.workflow }}-${{ github.job }}-petbuild-output-${{ github.sha }}
        restore-keys: |
          ${{ github.workflow }}-${{ github.job }}-petbuild-output-
    - name: 3builddistro
      run: |
        sudo chown -R root:root petbuild-output
        sudo mv petbuild-{sources,cache,output} ../woof-out_x86_64_x86_64_debian_bullseye/
        cd ../woof-out_x86_64_x86_64_debian_bullseye
        sudo -E ./3builddistro
        sudo gzip -1 woof-output-bullseye-8.0/bullseye-8.0-ext4-2gb-legacy.img
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
      with:
        tag_name: bullseye-x86_64-v${{ github.run_number }}
        release_name: bullseye-x86_64-v${{ github.run_number }}
        draft: false
        prerelease: true
    - name: Upload x86_64 image
      id: upload-release-asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
        asset_path: ../woof-out_x86_64_x86_64_debian_bullseye/woof-output-bullseye-8.0/bullseye-8.0-ext4-2gb-legacy.img.gz
        asset_name: bullseye-8.0-ext4-2gb-x86_64.img.gz
        asset_content_type: application/octet-stream
    - name: Upload x86_64 devx
      id: upload-devx
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
        asset_path: ../woof-out_x86_64_x86_64_debian_bullseye/woof-output-bullseye-8.0/devx_bullseye_8.0.sfs
        asset_name: devx_bullseye_8.0-x86_64.sfs
        asset_content_type: application/octet-stream
    - name: Run automated tests
      run: |
        cd ci
        gzip -dc ../../woof-out_x86_64_x86_64_debian_bullseye/woof-output-bullseye-8.0/bullseye-8.0-ext4-2gb-legacy.img.gz > test.img
        ./test.sh test.img || :
        tar -c /tmp/*.pnm /tmp/*.bmp | gzip -9 > /tmp/screenshots.tar.gz
    - name: Upload screenshots
      id: upload-screenshots
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
        asset_path: /tmp/screenshots.tar.gz
        asset_name: screenshots.tar.gz
        asset_content_type: application/octet-stream
    - name: Move cached directories
      run: |
        sudo mv ../woof-out_x86_64_x86_64_debian_bullseye/petbuild-{sources,cache,output} .
        sudo mv ../woof-out_x86_64_x86_64_debian_bullseye/kernel-kit/output kernel-kit-output
  arm:
    runs-on: ubuntu-20.04
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    - name: Install dependencies
      run: sudo apt-get install -y --no-install-recommends gcc-arm-linux-gnueabihf vboot-kernel-utils u-boot-tools device-tree-compiler cgpt qemu-user-static binfmt-support
    - name: Create cache directories
      run: |
        mkdir -p local-repositories petbuild-sources petbuild-cache petbuild-output kernel-kit-output
        ln -s `pwd`/local-repositories ../local-repositories
    - name: Get cached local-repositories
      uses: actions/cache@v2
      with:
        path: local-repositories
        key: ${{ github.workflow }}-${{ github.job }}-local-repositories-${{ github.sha }}
        restore-keys: |
          ${{ github.workflow }}-${{ github.job }}-local-repositories-
    - name: Prepare build environment
      run: |
        [ -f local-repositories/vercmp ] || (curl https://raw.githubusercontent.com/puppylinux-woof-CE/initrd_progs/master/pkg/w_apps_static/w_apps/vercmp.c | gcc -x c -o ../local-repositories/vercmp -)
        sudo install -m 755 local-repositories/vercmp /usr/local/bin/vercmp
        sudo install -D -m 644 woof-code/rootfs-skeleton/usr/local/petget/categories.dat /usr/local/petget/categories.dat
        echo "dash dash/sh boolean false" | sudo debconf-set-selections
        sudo DEBIAN_FRONTEND=noninteractive dpkg-reconfigure dash
        sudo ln -s /usr/bin/mount /usr/local/bin/mount-FULL
    - name: Fix cache ownership
      run: sudo chown -R root:root local-repositories
    - name: merge2out
      run: |
        (echo 1; echo 1; echo; echo) | sudo -E ./merge2out
    - name: 0setup
      run: |
        cd ../woof-out_x86_64_arm_debian_bullseye
        sudo ./0setup
    - name: 1download
      run: |
        cd ../woof-out_x86_64_arm_debian_bullseye
        sudo ./1download
    - name: Get cached kernel-kit output
      id: get_kernel_kit_output_cache
      uses: actions/cache@v2
      with:
        path: kernel-kit-output
        key: ${{ github.workflow }}-${{ github.job }}-kernel-kit-output-${{ hashFiles('kernel-kit/**') }}
        restore-keys: |
          ${{ github.workflow }}-${{ github.job }}-kernel-kit-output-
    - name: Move cached kernel-kit output
      run: sudo mv kernel-kit-output ../woof-out_x86_64_arm_debian_bullseye/kernel-kit/output
    - name: Install ccache
      if: steps.get_kernel_kit_output_cache.outputs.cache-hit != 'true'
      run: |
        sudo apt-get install -y --no-install-recommends ccache
        ccache --set-config=hash_dir=false --set-config=max_size=2.0G
    - name: Get cached ~/.ccache
      if: steps.get_kernel_kit_output_cache.outputs.cache-hit != 'true'
      uses: actions/cache@v2
      with:
        path: ~/.ccache
        key: ${{ github.workflow }}-${{ github.job }}-ccache-${{ github.sha }}
        restore-keys: |
          ${{ github.workflow }}-${{ github.job }}-ccache-
    - name: kernel-kit
      if: steps.get_kernel_kit_output_cache.outputs.cache-hit != 'true'
      run: |
        cd ../woof-out_x86_64_arm_debian_bullseye/kernel-kit
        sudo cp -f c201-build.conf build.conf
        sudo -E ./build.sh
    - name: 2createpackages
      run: |
        cd ../woof-out_x86_64_arm_debian_bullseye
        echo | sudo ./2createpackages
    - name: Get cached petbuild-sources
      id: get_petbuild_sources_cache
      uses: actions/cache@v2
      with:
        path: petbuild-sources
        key: ${{ github.workflow }}-petbuild-sources-${{ github.sha }}
        restore-keys: |
          ${{ github.workflow }}-petbuild-sources-
    - name: Get cached petbuild-cache
      id: get_petbuild_cache
      uses: actions/cache@v2
      with:
        path: petbuild-cache
        key: ${{ github.workflow }}-${{ github.job }}-petbuild-cache-${{ github.sha }}
        restore-keys: |
          ${{ github.workflow }}-${{ github.job }}-petbuild-cache-
    - name: Get cached petbuild-output
      id: get_petbuild_output_cache
      uses: actions/cache@v2
      with:
        path: petbuild-output
        key: ${{ github.workflow }}-${{ github.job }}-petbuild-output-${{ github.sha }}
        restore-keys: |
          ${{ github.workflow }}-${{ github.job }}-petbuild-output-
    - name: 3builddistro
      run: |
        sudo chown -R root:root petbuild-output
        sudo mv petbuild-{sources,cache,output} ../woof-out_x86_64_arm_debian_bullseye/
        cd ../woof-out_x86_64_arm_debian_bullseye
        sudo -E ./3builddistro
        sudo gzip -1 ./woof-output-bullseye-8.0/bullseye-8.0-ext4-2gb.img
    - name: Move cached directories
      run: |
        sudo mv ../woof-out_x86_64_arm_debian_bullseye/petbuild-{sources,cache,output} .
        sudo mv ../woof-out_x86_64_arm_debian_bullseye/kernel-kit/output kernel-kit-output
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
      with:
        tag_name: bullseye-arm-v${{ github.run_number }}
        release_name: bullseye-arm-v${{ github.run_number }}
        draft: false
        prerelease: true
    - name: Upload C201 image
      id: upload-release-asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
        asset_path: ../woof-out_x86_64_arm_debian_bullseye/woof-output-bullseye-8.0/bullseye-8.0-ext4-2gb.img.gz
        asset_name: bullseye-8.0-ext4-2gb-arm.img.gz
        asset_content_type: application/octet-stream
    - name: Upload C201 devx
      id: upload-devx
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
        asset_path: ../woof-out_x86_64_arm_debian_bullseye/woof-output-bullseye-8.0/devx_bullseye_8.0.sfs
        asset_name: devx_bullseye_8.0-arm.sfs
        asset_content_type: application/octet-stream